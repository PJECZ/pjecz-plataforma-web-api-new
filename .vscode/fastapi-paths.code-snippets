{
  "FastAPI paths clave": {
    "scope": "python",
    "prefix": "fpathsclave",
    "body": [
      "\"\"\"",
      "${1:Modulos} v3, rutas (paths)",
      "\"\"\"",
      "from fastapi import APIRouter, Depends",
      "from fastapi_pagination.ext.sqlalchemy import paginate",
      "from sqlalchemy.orm import Session",
      "",
      "from lib.database import get_db",
      "from lib.exceptions import MyAnyError",
      "from lib.fastapi_pagination_custom_page import CustomPage, custom_page_success_false",
      "",
      "from .crud import get_${2:plural}, get_${3:singular}_with_clave",
      "from .schemas import ${4:EsquemaOut}, One${4:EsquemaOut}",
      "",
      "${2:plural} = APIRouter(prefix=\"/v3/${2:plural}\", tags=[\"categoria\"])",
      "",
      "",
      "@${2:plural}.get(\"\", response_model=CustomPage[${4:EsquemaOut}])",
      "async def listado_${2:plural}(",
      "\tdb: Session = Depends(get_db),",
      "):",
      "\t\"\"\"Listado de ${5:plural}\"\"\"",
      "\ttry:",
      "\t\tresultados = get_${2:plural}(db=db)",
      "\texcept MyAnyError as error:",
      "\t\treturn custom_page_success_false(error)",
      "\treturn paginate(resultados)",
      "",
      "",
      "@${2:plural}.get(\"/{clave}\", response_model=One${4:EsquemaOut})",
      "async def detalle_${3:singular}(",
      "\tclave: str,",
      "\tdb: Session = Depends(get_db),",
      "):",
      "\t\"\"\"Detalle de una ${6:singular} a partir de su clave\"\"\"",
      "\ttry:",
      "\t\t${3:singular} = get_${3:singular}_with_clave(db=db, clave=clave)",
      "\texcept MyAnyError as error:",
      "\t\treturn One${4:EsquemaOut}(success=False, message=str(error))",
      "\treturn One${4:EsquemaOut}.from_orm(${3:singular})",
      ""
    ],
    "description": "Contenido para paths.py con clave"
  },
  "FastAPI paths id": {
    "scope": "python",
    "prefix": "fpathsid",
    "body": [
      "\"\"\"",
      "${1:Modulos} v3, rutas (paths)",
      "\"\"\"",
      "from fastapi import APIRouter, Depends",
      "from fastapi_pagination.ext.sqlalchemy import paginate",
      "from sqlalchemy.orm import Session",
      "",
      "from lib.database import get_db",
      "from lib.exceptions import MyAnyError",
      "from lib.fastapi_pagination_custom_page import CustomPage, custom_page_success_false",
      "",
      "from .crud import get_${2:plural}, get_${3:singular}_with_clave",
      "from .schemas import ${4:EsquemaOut}, One${4:EsquemaOut}",
      "",
      "${2:plural} = APIRouter(prefix=\"/v3/${2:plural}\", tags=[\"categoria\"])",
      "",
      "",
      "@${2:plural}.get(\"\", response_model=CustomPage[${4:EsquemaOut}])",
      "async def listado_${2:plural}(",
      "\tdb: Session = Depends(get_db),",
      "):",
      "\t\"\"\"Listado de ${5:plural}\"\"\"",
      "\ttry:",
      "\t\tresultados = get_${2:plural}(db=db)",
      "\texcept MyAnyError as error:",
      "\t\treturn custom_page_success_false(error)",
      "\treturn paginate(resultados)",
      "",
      "",
      "@${2:plural}.get(\"/{${3:singular}_id}\", response_model=One${4:EsquemaOut})",
      "async def detalle_${3:singular}(",
      "\t${3:singular}_id: int,",
      "\tdb: Session = Depends(get_db),",
      "):",
      "\t\"\"\"Detalle de una ${6:singular} a partir de su id\"\"\"",
      "\ttry:",
      "\t\t${3:singular} = get_${3:singular}(db=db, ${3:singular}_id=${3:singular}_id)",
      "\texcept MyAnyError as error:",
      "\t\treturn One${4:EsquemaOut}(success=False, message=str(error))",
      "\treturn One${4:EsquemaOut}.from_orm(${3:singular})",
      ""
    ],
    "description": "Contenido para paths.py con id"
  }
}
